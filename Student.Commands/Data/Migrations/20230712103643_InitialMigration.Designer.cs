// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace gRPCOnHttp3.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230712103643_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("gRPCOnHttp3.Common.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AggregateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId", "Sequence")
                        .IsUnique();

                    b.ToTable("EventStore");

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("gRPCOnHttp3.Persistence.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("gRPCOnHttp3.Persistence.UniqueReference", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.ToTable("UniqueReferences");
                });

            modelBuilder.Entity("gRPCOnHttp3.ChangeEmail.StudentUpdatedEvent", b =>
                {
                    b.HasBaseType("gRPCOnHttp3.Common.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue("StudentEmailChanged");
                });

            modelBuilder.Entity("gRPCOnHttp3.CreateStudent.StudentCreatedEvent", b =>
                {
                    b.HasBaseType("gRPCOnHttp3.Common.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.HasDiscriminator().HasValue("StudentCreated");
                });

            modelBuilder.Entity("gRPCOnHttp3.Persistence.OutboxMessage", b =>
                {
                    b.HasOne("gRPCOnHttp3.Common.Event", "Event")
                        .WithOne()
                        .HasForeignKey("gRPCOnHttp3.Persistence.OutboxMessage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
